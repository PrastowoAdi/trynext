import { NextPage } from "next";
import Head from "next/head";

const Index: NextPage = ({ posts }: any) => {
  // console.log("posts", posts);
  // const [realTimeData, setRealTimeData] = useState(null);

  // useEffect(() => {
  //   const socket = io("http://localhost:3001");

  //   socket.on("real-time-data", (data) => {
  //     setRealTimeData(data);
  //   });

  //   return () => {
  //     socket.disconnect();
  //   };
  // }, []);

  return (
    <>
      <Head>
        <title>reactpdf</title>
        <meta name="description" content="Generated by Create Next Stack." />
      </Head>
      <div>
        {/* {realTimeData ? (
          <>
            <p>Real-Time Data: {realTimeData.status}</p>
            <p>Real-Time Data: {realTimeData.timestamp}</p>
          </>
        ) : (
          <p>Loading real-time data...</p>
        )} */}
        {posts.data.map((e: any, i: number) => (
          <p key={i}>halo {!e.status ? "under maintance" : "up"}</p>
        ))}
      </div>
    </>
  );
};

export default Index;

// export async function getStaticProps() {
//   // Fetch your data from an API or any data source
//   const response = await fetch(
//     "https://hungry-cyan-turtleneck.cyclic.app/api/work"
//   );
//   console.log("response", response.json());

//   // Return the data as props
//   return {
//     props: {},
//     // You can also set a revalidation time (in seconds) if you want to enable Incremental Static Regeneration (ISR)
//     revalidate: 10, // This means the page will be regenerated after 60 seconds if there are new requests
//   };
// }
export async function getStaticProps() {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const res = await fetch("https://hungry-cyan-turtleneck.cyclic.app/api/work");
  const posts = await res.json();

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts,
    },
    revalidate: 10,
  };
}
